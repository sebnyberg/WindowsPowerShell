# Created 2017-05-03 Wed 20:27
#+TITLE: Get-ChildItemColor
#+AUTHOR: Joon Ro
- This adds colors to the output of =Get-ChildItem= Cmdlet of PowerShell. It is
  based on Tim Johnson's [[http://tasteofpowershell.blogspot.com/2009/02/get-childitem-dir-results-color-coded.html][script]] and another [[http://mow001.blogspot.com/2006/01/colorized-msh-ls-replacement.html][script]] by [[http://thepowershellguy.com/][the PowerShell Guy]].
- Before version 1.0.0, the script actually had used =Write-Host= to write
  colored items on console. Now it just changes
  =$Host.UI.RawUI.ForegroundColor= and keep the item object intact. Hence, now
  one can use pipeline. (e.g., ~Get-ChildItemColor | grep ".git"~).
- =Get-ChildItemColorFormatWide= still uses =Write-Host= for output
  however. This is because =Get-ChildItemColor | Format-Wide= does not allow
  multiple colors in one line. Hence, pipeline does not work with
  =Get-ChildItemColorFormatWide=.
* Screenshot:
** Get-ChildItemColor
[[file:./screenshots/Get-ChildItemColor.png]] 
** Get-ChildItemColorFormatWide (=ls= equivalent)
[[file:./screenshots/Get-ChildItemColorFormatWide.png]] 
* Notes on the code
- It uses a hash table instead of regular expressions to specify colors
- Recognize the =DictionaryEntry= case (e.g., =Get-ChildItemColor env:=)
- Color support for =| Format-Wide= format (=ls= equivalent) with custom script
* Install
** Install from [[https://www.powershellgallery.com/packages/Get-ChildItemColor/][PowerShellGallery]]
PowerShellGet is required, which is included in Windows 10 and WMF5. If you
are using PowerShell V3 or V4, you will need to install [[https://www.microsoft.com/en-us/download/details.aspx?id=49186][PowerShellGet]].

Then, you can simply run =Install-Module Get-ChildItemColor= (or
=Install-Module Get-ChildItemColor -Scope CurrentUser=).
** Install from GitHub
Clone the repo in your PowerShell Module folder
(=$ENV:UserProfile\Documents\WindowsPowerShell\Modules=).

#+BEGIN_SRC sh
git clone https://github.com/joonro/Get-ChildItemColor.git
#+END_SRC
* Usage
When you import the module:

#+BEGIN_SRC powershell
Import-Module Get-ChildItemColor
#+END_SRC

it exposes two functions, =Get-ChildItemColor= and =Get-ChildItemColorFormatWide=.

You can add aliases to these functions for convenience. For example, I have
the following in my =$PROFILE$= [fn:PathProfile]:

#+BEGIN_SRC powershell
Import-Module Get-ChildItemColor
 
Set-Alias l Get-ChildItemColor -option AllScope
Set-Alias ls Get-ChildItemColorFormatWide -option AllScope
#+END_SRC

So =l= yields colored output of =Get-ChildItem= and =ls= yields colored output
of =Get-ChildItem | Format-Wide= equivalent.

[fn:PathProfile] =$ENV:UserProfile\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1=
* Authors
- [[http://github.com/joonro][Joon Ro]]
* Changelog
** v1.2.0
- Robust to non-file entries (Issue #10)
** v1.1.0
- Revert back to previous implementation of =Get-ChildItemColorFormatWide=
** v1.0.0
- The script changes =$Host.UI.RawUI.ForegroundColor= only and keep the item object intact
- =Get-ChildItemColorFormatWide= is basically =Get-ChildItemColor | Format-Wide=
** v0.5.3
- Better performance by reducing if's
- Proper printing of =DirectoryEntry= for =FormatWide= case
** v0.5.2
- Published on PowerShellGallery
- Refactoring; separate out two functions
** v0.4.2
- Make it a PowerShell module
** v0.4.1
- Returns vanila =Get-Childitem= results for =DictionaryEntry= cases.
** v0.4.0
- Make function names consistent to the PowerShell naming convention (#8)
- Use parameters more consistently, =-Path= works with paths with spaces (#3),
  and =-Force= works (#9)
